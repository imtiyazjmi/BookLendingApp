name: Deploy to AWS Lambda via S3

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Lambda Tools
        run: dotnet tool install -g Amazon.Lambda.Tools

      - name: Build and Package Lambda
        run: |
          cd src
          dotnet lambda package --configuration Release --framework net8.0 --output-package ../deployment/lambda-function.zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Change to your region

      - name: Deploy Infrastructure
        run: |
          aws cloudformation deploy \
            --template-file deployment/minimal-infrastructure.yaml \
            --stack-name BookLendingInfrastructure \
            --capabilities CAPABILITY_IAM

      - name: Upload to S3
        run: aws s3 cp deployment/lambda-function.zip s3://lambda-deployment-565393029483-us-east-1/lambda-function.zip

      - name: Get Lambda Function Name
        run: |
          echo "Checking CloudFormation stack outputs..."
          aws cloudformation describe-stacks --stack-name BookLendingInfrastructure --query 'Stacks[0].Outputs'
          
          LAMBDA_FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name BookLendingInfrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          echo "Retrieved Lambda Function Name: $LAMBDA_FUNCTION_NAME"
          
          if [ "$LAMBDA_FUNCTION_NAME" = "None" ] || [ -z "$LAMBDA_FUNCTION_NAME" ]; then
            echo "Lambda function name not found in outputs, using direct resource name"
            LAMBDA_FUNCTION_NAME="BookLendingLambda"
          fi
          
          echo "LAMBDA_FUNCTION_NAME=$LAMBDA_FUNCTION_NAME" >> $GITHUB_ENV
          echo "Final Lambda Function Name: $LAMBDA_FUNCTION_NAME"

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --s3-bucket lambda-deployment-565393029483-us-east-1 \
            --s3-key lambda-function.zip

      - name: Wait for function update to complete
        run: |
          aws lambda wait function-updated \
            --function-name $LAMBDA_FUNCTION_NAME

      - name: Get Infrastructure Outputs
        run: |
          RDS_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name BookLendingInfrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`RDSEndpoint`].OutputValue' \
            --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Create environment variables file
        run: |
          cat > env-vars.json << EOF
          {
            "Variables": {
              "USE_SSM": "false",
              "POSTGRESQL_HOST": "$RDS_ENDPOINT",
              "POSTGRESQL_DATABASE": "postgres",
              "POSTGRESQL_USERNAME": "masteruser",
              "POSTGRESQL_PASSWORD": "Password2123",
              "AWS_REGION": "us-east-1"
            }
          }
          EOF

      - name: Update Lambda function configuration
        run: |
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --handler "BookLendingApp::BookLendingApp.LambdaEntryPoint::FunctionHandlerAsync" \
            --environment file://env-vars.json \
            --timeout 30

      - name: Deploy API Gateway
        run: |
          aws cloudformation deploy \
            --template-file deployment/api-gateway.yaml \
            --stack-name BookLendingApiGateway \
            --parameter-overrides LambdaFunctionName=$LAMBDA_FUNCTION_NAME \
            --capabilities CAPABILITY_IAM

      - name: Get API Gateway URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name BookLendingApiGateway \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "API Gateway URL: $API_URL"