AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: MyVPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: MyVPC
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: MyVPC
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value: PrivateSubnet2
  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: MyVPC
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: PublicSubnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MyVPC-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - MyVPC
    - InternetGateway
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId:
        Ref: InternetGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - PublicSubnet
    - NATGatewayEIP
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGatewayEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: MyVPC
    Properties:
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PrivateRouteTable
    - NATGateway
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: MyVPC
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId:
        Ref: MyVPC
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
    - MyVPC
    - LambdaSecurityGroup
    Properties:
      GroupDescription: Allow access to RDS from Lambda
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: LambdaAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - rds:DescribeDBInstances
            - rds:Connect
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::lambda-deployment-${AWS::AccountId}-${AWS::Region}/*
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/MyLambdaFunction
      RetentionInDays: 14
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaExecutionRole
    - LambdaLogGroup
    - LambdaSecurityGroup
    - MyRDSInstance
    Properties:
      FunctionName: MyLambdaFunction
      Handler: BookLendingApp::BookLendingApp.LambdaEntryPoint::FunctionHandlerAsync
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        S3Bucket: lambda-deployment-565393029483-us-east-1
        S3Key: lambda-function.zip
      Runtime: dotnet8
      Timeout: 30
      MemorySize: 512
      Architectures:
      - x86_64
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Environment:
        Variables:
          USE_SSM: 'false'
          POSTGRESQL_HOST:
            Fn::GetAtt:
            - MyRDSInstance
            - Endpoint.Address
          POSTGRESQL_DATABASE: postgres
          POSTGRESQL_USERNAME: masteruser
          POSTGRESQL_PASSWORD: Password2123
          AWS_LAMBDA_REGION:
            Ref: AWS::Region
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyLambdaAPI
  MyApiResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: MyApiGateway
    Properties:
      ParentId:
        Fn::GetAtt:
        - MyApiGateway
        - RootResourceId
      PathPart: lambda
      RestApiId:
        Ref: MyApiGateway
  MyApiMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
    - MyApiResource
    - MyLambdaFunction
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: MyApiResource
      RestApiId:
        Ref: MyApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - MyLambdaFunction
    - MyApiMethod
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: MyLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
    - PrivateSubnet1
    - PrivateSubnet2
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
    - MyDBSubnetGroup
    - RDSSecurityGroup
    Properties:
      DBInstanceIdentifier: my-postgres-db
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '16.4'
      MasterUsername: masteruser
      MasterUserPassword: Password2123
      AllocatedStorage: '20'
      DBSubnetGroupName:
        Ref: MyDBSubnetGroup
      VPCSecurityGroups:
      - Ref: RDSSecurityGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      DeletionProtection: false
  MySSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /config/dbConnection
      Type: String
      Value: postgres://masteruser:Password2123@localhost:5432/postgres
  MySSMParameterWithEndpoint:
    Type: AWS::SSM::Parameter
    DependsOn: MyRDSInstance
    Properties:
      Name: /config/dbConnectionWithEndpoint
      Type: String
      Value:
        Fn::Sub: postgres://masteruser:Password2123@${MyRDSInstance.Endpoint.Address}:5432/postgres